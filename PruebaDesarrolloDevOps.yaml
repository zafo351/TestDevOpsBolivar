AWSTemplateFormatVersion: 2010-09-09
Metadata:
  'AWS::CloudFormation::Designer':
    VPCTest1:
      size:
        width: 100
        height: 110
      position:
        x: 110
        'y': 300
      z: 1
      embeds: []
    HostedZoneTest1:
      size:
        width: 120
        height: 90
      position:
        x: -130
        'y': 170
      z: 1
      embeds: []
    SubnetTest1:
      size:
        width: 100
        height: 80
      position:
        x: 450
        'y': 90
      z: 1
      embeds: []
    SubnetTest2:
      size:
        width: 100
        height: 80
      position:
        x: 450
        'y': 200
      z: 1
      embeds: []
    SubnetTest4:
      size:
        width: 110
        height: 100
      position:
        x: 440
        'y': 470
      z: 1
      embeds: []
    SubnetTest3:
      size:
        width: 90
        height: 90
      position:
        x: 450
        'y': 330
      z: 1
      embeds: []
    EC2Instance1:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': 380
      z: 0
      embeds: []
    EC2Instance2:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': 270
      z: 0
      embeds: []
    EC2Instance3:
      size:
        width: 60
        height: 60
      position:
        x: 600
        'y': 160
      z: 0
      embeds: []
    InternetGateway1:
      size:
        width: 60
        height: 60
      position:
        x: 120
        'y': 190
      z: 0
      embeds: []
    NatGateway1:
      size:
        width: 60
        height: 60
      position:
        x: 220
        'y': 190
      z: 0
      embeds: []
    AplicationLoadBalacer1:
      size:
        width: 60
        height: 60
      position:
        x: 10
        'y': 300
      z: 0
      embeds: []
    DMS1:
      size:
        width: 60
        height: 60
      position:
        x: 710
        'y': 190
      z: 0
      embeds: []
    RDSPostresSQL1:
      size:
        width: 60
        height: 60
      position:
        x: 780
        'y': 260
      z: 0
      embeds: []
    EC2Instance4:
      size:
        width: 60
        height: 60
      position:
        x: 610
        'y': 480
      z: 0
      embeds: []
    Lambda1:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 440
      z: 0
      embeds: []
    Lambda2:
      size:
        width: 60
        height: 60
      position:
        x: 780
        'y': 490
      z: 0
      embeds: []
    Lambda3:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 530
      z: 0
      embeds: []
    Bucket1:
      size:
        width: 60
        height: 60
      position:
        x: 700
        'y': 350
      z: 0
      embeds: []
    Bucket2:
      size:
        width: 60
        height: 60
      position:
        x: 780
        'y': 350
      z: 0
      embeds: []
Resources:
  HostedZoneTest:
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: devops-test-bolivar.com
    Tags:
      - Key: stack
        Value: test
    Metadata:
      'AWS::CloudFormation::Designer':
        id: HostedZoneTest1
  VPCTest:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsHostnames: true
      CidrBlock: 10.0.0.0/16
    Tags:
      - Key: stack
        Value: test
    Metadata:
      'AWS::CloudFormation::Designer':
        id: VPCTest1
  SubnetTest1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: SubnetTest1
      CidrBlock: 10.0.0.0/24
    Metadata:
      'AWS::CloudFormation::Designer':
        id: SubnetTest1
  SubnetTest2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: SubnetTest2
      CidrBlock: 10.0.1.0/24
    Metadata:
      'AWS::CloudFormation::Designer':
        id: SubnetTest2
  SubnetTest3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: SubnetTest3
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: SubnetTest3
  SubnetTest4:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId:
        Ref: SubnetTest4
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: true
    Metadata:
      'AWS::CloudFormation::Designer':
        id: SubnetTest4
  EC2Instance1:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m4.large
    Metadata:
      'AWS::CloudFormation::Designer':
        id: EC2Instance1
  EC2Instance2:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m4.large
    Metadata:
      'AWS::CloudFormation::Designer':
        id: EC2Instance2
  EC2Instance3:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m4.large
    Metadata:
      'AWS::CloudFormation::Designer':
        id: EC2Instance3
  InternetGateway1:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: InternetGateway1
  NatGateway1:
    Type: 'AWS::EC2::NatGateway'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: NatGateway1
  AplicationLoadBalacer1:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: AplicationLoadBalacer1
  DMS1:
    Type: 'AWS::DMS::ReplicationInstance'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: DMS1
  RDSPostresSQL1:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      Engine: postgres
    Metadata:
      'AWS::CloudFormation::Designer':
        id: RDSPostresSQL1
  EC2Instance4:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: m3.medium
    Metadata:
      'AWS::CloudFormation::Designer':
        id: EC2Instance4
  Lambda1:
    Type: 'AWS::Lambda::Function'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: Lambda1
  Lambda2:
    Type: 'AWS::Lambda::Function'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: Lambda2
  Lambda3:
    Type: 'AWS::Lambda::Function'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: Lambda3
  Bucket1:
    Type: 'AWS::S3::Bucket'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: Bucket1
  Bucket2:
    Type: 'AWS::S3::Bucket'
    Properties: {}
    Metadata:
      'AWS::CloudFormation::Designer':
        id: Bucket2
